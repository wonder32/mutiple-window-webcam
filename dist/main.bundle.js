(self.webpackChunkmagic=self.webpackChunkmagic||[]).push([[179],{807:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(537),o=n.n(r),s=n(645),i=n.n(s)()(o());i.push([e.id,"svg,video{position:absolute;pointer-events:none}svg{display:none;z-index:2}body{overflow:hidden;margin:0}\n","",{version:3,sources:["webpack://./src/scss/style.scss"],names:[],mappings:"AAAA,UAEE,iBAAkB,CAClB,mBAAoB,CACrB,IAGC,YAAa,CACb,SAAU,CACX,KAGC,eAAgB,CAChB,QAAS",sourcesContent:["svg,\nvideo {\n  position: absolute;\n  pointer-events: none;\n}\n\nsvg {\n  display: none;\n  z-index: 2;\n}\n\nbody {\n  overflow: hidden;\n  margin: 0;\n\n  .clear,\n  .stats {\n    //position: relative;\n    //z-index: 2;\n  }\n}\n"],sourceRoot:""}]);const a=i},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,s){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(i[c]=!0)}for(var u=0;u<e.length;u++){var l=[].concat(e[u]);r&&i[l[0]]||(void 0!==s&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=s),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),s="/*# ".concat(o," */");return[t].concat([s]).join("\n")}return[t].join("\n")}},607:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>w});var r=n(379),o=n.n(r),s=n(795),i=n.n(s),a=n(569),c=n.n(a),u=n(565),l=n.n(u),d=n(216),p=n.n(d),h=n(589),v=n.n(h),f=n(807),m={};m.styleTagTransform=v(),m.setAttributes=l(),m.insert=c().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=p(),o()(f.Z,m);const w=f.Z&&f.Z.locals?f.Z.locals:void 0},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var s={},i=[],a=0;a<e.length;a++){var c=e[a],u=r.base?c[0]+r.base:c[0],l=s[u]||0,d="".concat(u," ").concat(l);s[u]=l+1;var p=n(d),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)t[p].references++,t[p].updater(h);else{var v=o(h,r);r.byIndex=a,t.splice(a,0,{identifier:d,updater:v,references:1})}i.push(d)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var s=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<s.length;i++){var a=n(s[i]);t[a].references--}for(var c=r(e,o),u=0;u<s.length;u++){var l=n(s[u]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}s=c}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var s=n.sourceMap;s&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},672:(e,t,n)=>{n(974),n(607)},974:(e,t,n)=>{"use strict";n.r(t);const r=`screen-${Object.keys(window.localStorage).filter((e=>e.startsWith("screen-"))).map((e=>parseInt(e.replace("screen-","")))).sort(((e,t)=>e-t)).at(-1)+1||1}`;function o(){return Object.entries(window.localStorage).filter((([e])=>e.startsWith("screen-"))).map((([e,t])=>[e,JSON.parse(t)]))}const s=document.querySelector(".stats");class i{constructor(){return this.moves=[],this}moveTo(e,t){return this.moves.push(`M ${e} ${t}`),this}closePath(){return this.moves.push("Z"),this}lineTo(e,t){return this.moves.push(`L ${e} ${t}`),this}horizontalLineTo(e){return this.moves.push(`H ${e}`),this}verticalLineTo(e){return this.moves.push(`V ${e}`),this}curveTo(e,t,n,r,o,s){return this.moves.push(`C ${e} ${t} ${n} ${r} ${o} ${s}`),this}smoothCurveTo(e,t,n,r){return this.moves.push(`S ${e} ${t} ${n} ${r}`),this}quadraticCurveTo(e,t,n,r){return this.moves.push(`Q ${e} ${t} ${n} ${r}`),this}smoothQuadraticCurveTo(e,t){return this.moves.push(`T ${e} ${t}`),this}arc(e,t,n,r,o,s,i){const a=r?1:0,c=o?1:0;return this.moves.push(`A ${e} ${t} ${n} ${a} ${c} ${s} ${i}`),this}catmullRomCurveTo(e,t,n,r){return this.moves.push(`R ${e} ${t} ${n} ${r}`),this}toString(){return this.moves.join(" ")}}const a=document.querySelector("svg");const c=document.querySelector("video"),u=document.querySelector(".clear"),l=document.querySelector("svg path"),d=[];u.addEventListener("click",(function(){console.log(d),d.forEach((e=>window.clearInterval(e))),window.localStorage.clear(),setTimeout((()=>window.location.reload()),1e3*Math.random())})),window.addEventListener("beforeunload",(function(){console.log(`removing screen ${r}`),localStorage.removeItem(r)})),d.push(setInterval((function(){const e={screenX:window.screenX,screenY:window.screenY,screenWidth:window.screen.availWidth,screenHeight:window.screen.availHeight,width:window.outerWidth,height:window.innerHeight,updated:Date.now()};window.localStorage.setItem(r,JSON.stringify(e))}),10)),d.push(setInterval((function(){if(!s)return;const e=Object.fromEntries(o());s.innerHTML=JSON.stringify(e,null," ")}),10)),d.push(setInterval((function(){const e=o();for(const[t,n]of e)Date.now()-n.updated>1e3&&localStorage.removeItem(t)}),100)),d.push(setInterval((function(e,t){const n=new i;a.setAttribute("viewBox",`0 0 ${window.screen.availWidth} ${window.screen.availHeight}`),a.setAttribute("width",`${window.screen.availWidth}px`),a.setAttribute("height",`${window.screen.availHeight}px`),a.setAttribute("style",`transform: translate(-${window.screenX}px, -${window.screenY}px)`),e.setAttribute("style",`transform: translate(-${window.screenX}px, -${window.screenY}px)`),o().map((([e,t])=>{const n=t.screenX+t.width/2,r=t.screenY+t.height/2;return[e,{...t,x:n,y:r}]})).forEach((([e,t],r)=>{0===r?n.moveTo(t.x,t.y):n.lineTo(t.x,t.y)})),n.closePath(),t.setAttribute("d",n.toString())}),100,c,l)),function(e){navigator.mediaDevices.getUserMedia({video:!0}).then((t=>{e&&(e.height=window.screen.availHeight,e.srcObject=t,e.play())}))}(c)}},e=>{e(e.s=672)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,